AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  events_service

# Global Settings
Globals:
  Api:
    Cors:
      AllowMethods: "*"
      AllowHeaders: "*"
      AllowOrigin: "*"
      AllowCredentials: 'true'
  Function:
    Timeout: 60
    MemorySize: 256

Resources:
  # API Gateway
  EventsServiceApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: api-v1

  # DynamoDB Table definition
  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: events
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
        - AttributeName: startingAt
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: startingAt-index
          KeySchema:
            - AttributeName: startingAt
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  GiveawayTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: giveaways
      AttributeDefinitions:
        - AttributeName: giveaway_id
          AttributeType: S
      KeySchema:
        - AttributeName: giveaway_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda Functions

  RegisterEventFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: register_lambda.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          EVENTS_TABLE_NAME: !Ref EventsTable
          GIVEAWAY_TABLE_NAME: !Ref GiveawayTable
          CLUBS_TABLE_NAME: !ImportValue club-service-ClubsTableName
          USERS_TABLE_NAME: !ImportValue user-service-UsersTableName
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            # Events table permissions
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource: !GetAtt EventsTable.Arn
            # Clubs table permissions
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource: !ImportValue club-service-ClubsTableArn
            # Users table permissions
            - Effect: Allow
              Action:
                - "dynamodb:*"
              Resource: !ImportValue user-service-UsersTableArn
      Events:
        RegisterEventEndpoint:
          Type: HttpApi 
          Properties:
            Path: /event/register
            Method: POST
            ApiId: !Ref EventsServiceApi

  GetRandomGiveawayWinnerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: get_random_winner_lambda.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          GIVEAWAY_TABLE_NAME: !Ref GiveawayTable
          USERS_TABLE_NAME: !ImportValue user-service-UsersTableName
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            # Events table permissions
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
              Resource: !GetAtt EventsTable.Arn
            # Users table permissions
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
              Resource: !ImportValue user-service-UsersTableArn
      Events:
        GetRandomGiveawayWinnerEndpoint:
          Type: HttpApi 
          Properties:
            Path: /giveaway/winner
            Method: GET
            ApiId: !Ref EventsServiceApi
  
  SearchEventFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ./
      Handler: search_lambda.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          EVENTS_TABLE_NAME: !Ref EventsTable
      Architectures:
        - x86_64
      Policies:
        - Version: '2012-10-17'
          Statement:
            # Events table permissions
            - Effect: Allow
              Action:
                - "dynamodb:Scan"  # Allow scan action for search
              Resource: !GetAtt EventsTable.Arn
      Events:
        SearchEventEndpoint:
          Type: HttpApi
          Properties:
            Path: /event/search  # URL path for search functionality
            Method: GET  # Using GET method as it's search-based
            ApiId: !Ref EventsServiceApi

Outputs:
  EventsTableArn:
    Description: "Events table ARN"
    Value: !GetAtt EventsTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EventsTableArn"

  EventsTableName:
    Description: "Events table NAME"
    Value: !Ref EventsTable
    Export:
      Name: !Sub "${AWS::StackName}-EventsTableName"

  EndpointURI:
    Description: "API Endpoint URL"
    Value: !Sub "https://${EventsServiceApi}.execute-api.${AWS::Region}.amazonaws.com/api-v1"
    Export:
      Name: EventsServiceApiUrl